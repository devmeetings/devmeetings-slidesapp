extends layout

block content
    .row
      .col-lg-12
        form.form-inline.pull-right
            .form-group
                select.form-control.mode-chooser
                    option(value="java") Java
                    option(value="node") Node.js
                    option(value="express") Express.js
    .row
      .col-lg-12
        br
        div
            span.editor-change-size.glyphicon.glyphicon-fullscreen
            .code-editor.editor(
            class="big" 
            )
        textarea.code-java(style="display:none").
            import java.util.Random;

            public class TestClass {

              public static int rand() {
                return new Random().nextInt();
              }

              public static String main() {
                StringBuilder builder = new StringBuilder();
                builder.append("Hello ");
                builder.append("world !");
                builder.append(rand());
                return builder.toString();
              }

            }
        textarea.code-node(style="display:none").
            var fs = require('fs');

            console.log(Object.keys(fs));
            console.log("Test");

        textarea.code-express(style="display:none").
            /**
             * Module dependencies.
             */

            var express = require('express');
            var http = require('http');
            var path = require('path');

            var app = express();

            // all environments
            app.set('port', process.env.PORT || 3000);
            app.set('views', path.join(__dirname, 'views'));
            app.set('view engine', 'jade');
            app.use(express.favicon());
            app.use(express.logger('dev'));
            app.use(express.json());
            app.use(express.urlencoded());
            app.use(express.methodOverride());
            app.use(express.cookieParser('your secret here'));
            app.use(express.session());
            app.use(express.bodyParser());
            app.use(app.router);
            app.use(express.static(path.join(__dirname, 'public')));

            // development only
            if ('development' == app.get('env')) {
                app.use(express.errorHandler());
            }

            app.get('/', function(req, res) {
                res.header('Access-Control-Allow-Origin', '*')
                res.send("Hello world!");
            });

            http.createServer(app).listen(app.get('port'), function(){
                console.log('Express server listening on port ' + app.get('port'));
            });

    .row
      .col-lg-12
        .errors.alert.alert-danger.errors-code
    br
    .output.row
      .col-sm-12
        .output-ace.editor
append scripts
    script(src="socket.io/socket.io.js")
    script(src="js/ace-builds/src-noconflict/ace.js")
    script(src="js/utils.js")        
    script.
        var socket = io.connect(SOCKET_URL);
        var modes = {
            java: {
                queue: 'run',
                ace: 'java'
            },
            node: {
                queue: 'run_node',
                ace: 'javascript'
            },
            express: {
                queue: 'run_express',
                ace: 'javascript'
            }
        };
        var mode = 'java';
        var applyMode = function() {
            var code = document.querySelector('.code-'+mode).value;
            editor.setValue(code);
            editor.getSession().setMode('ace/mode/' + modes[mode].ace);
        };
        $('.mode-chooser').on('change', function(){
            mode = $(this).val();
            applyMode();
        });
        var editor = ace.edit(document.querySelector(".code-editor"));
        editor.setTheme("ace/theme/todr");

        var output = ace.edit(document.querySelector('.output-ace'));
        output.setTheme("ace/theme/twilight");
        output.setReadOnly(true);
        output.setHighlightActiveLine(false);
        output.setShowPrintMargin(false);
        output.renderer.setShowGutter(false);

        var errors = document.querySelector('.errors');

        socket.on('result', function(data2) {
            console.timeEnd("request");
            var data = JSON.parse(data2.data);
            errors.innerHTML = data.errors || "";
            output.setValue(data.result);
            if (data.queue === modes.express.queue) {
                $.ajax({
                    url: '//' + window.location.hostname + ':' + data2.port,
                    success: function(content) {
                        output.setValue(data.result + "\n\n" + content);
                    }
                });
            }
        });

        var runContent = function() {
            console.time("request");
            var code = editor.getValue();
    
            socket.emit('execute', {
                queue: modes[mode].queue,
                code: code
            });
            output.setValue("...");
        };

        editor.on('change', _.debounce(runContent, 200));
        applyMode();
