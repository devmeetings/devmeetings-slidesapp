{ "_id" : { "$oid" : "53b2cd856703ba00002096e9" }, "slides" : [ { "timestamp" : 0, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 288892, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name')\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 290691, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name')\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 294103, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name'),\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 338573, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name'),sssa\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 339963, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name'),sssa\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 341165, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name'),sssa\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 342888, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name'),sssadas;';;'\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 345601, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name'),sssadas;';;'\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 346848, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name'),sssadas\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 348097, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name'),sssadas\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 358728, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 359854, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 363582, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username |) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 364853, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username |) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 367463, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username || true) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 368488, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username || true) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 371121, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username || true) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 372777, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 373832, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 427262, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 435451, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('na3me');\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 497377, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 798324, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 799807, "code" : { "notes" : "What will we learn today:\n  - Introduction to HTML and CSS\n  - JavaScript basics\n", "right" : { "text" : "<div class=\"text-center\">\n  <a href=\"http://pl.tinypic.com?ref=oa2mbk\" target=\"_blank\">\n    <img src=\"http://i39.tinypic.com/oa2mbk.png\" alt=\"Image and video hosting by TinyPic\" width=\"400\">\n  </a>\n</div>\n" }, "left" : { "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var username = localStorage.getItem('name');\nif (!username) {\n  username = prompt(\"Jak się nazywasz?\");\n}\nlocalStorage.setItem('name', username);\ndocument.querySelector('.user-name').textContent = username;\n", "hideOutput" : true, "small" : true }, "text" : "<h3>\n  Hello <span class=\"user-name\"></span>!\n</h3>\n<h2>\n  <a href=\"http://devmeetings.pl\"><img src=\"http://devmeetings.pl/assets/logo-18db74aab9d40e85fddffe7608edd756.jpg\"></a>\n  rocks!\n</h2>\n" }, "title" : "JavaScript 4 Programmers - Wprowadzenie", "name" : "Hello World", "id" : "opening" } }, { "timestamp" : 806143, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 974065, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 975262, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 979088, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 983723, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"\"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 986035, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"\"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 988860, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I \"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 990234, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I \"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 991573, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I \"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 993798, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zosta\"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1007725, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań \"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1008732, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań \"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1009749, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań \"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1010912, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań developerem\"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1012210, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań developerem\"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1013233, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań developerem\"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1016788, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1062327, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1063513, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1064648, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1065771, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = []", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1066835, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = []", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1068831, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [\n    ]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1071202, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [\n    ]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1073129, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [\n    \"\"]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1090133, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [ \"Prz\\\"\n    \"\"]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1091537, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [ \"Prz\\\"\n    \"\"]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1092583, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [ \"Prz\\\"\n    \"\"]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1093592, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [ \"Przyjdź ma\"\n    \"\"]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1094966, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [ \"Przyjdź ma\"\n    \"\"]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1096945, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [ \"Przyjdź na De\"\n    \"\"]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1098031, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [ \"Przyjdź na De\"\n    \"\"]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1099035, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [ \"Przyjdź na De\"\n    \"\"]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1100681, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = [ \"Przyjdź na Dev\"\n    \"\"]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1123630, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = todos[1]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1124725, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = todos[1]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1125929, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\nvar x = todos[1]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1127327, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];0var x = todos[1]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1128708, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];0var x = todos[1]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1132924, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n]\n\nvar x = todos[1]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1136454, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n]\nvar x = todos[1]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1137513, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n]\nvar x = todos[1]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1138603, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n]\nvar x = todos[1]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1141269, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n]\nvar x = todos[1];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1154646, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n]\nvar x = todos[0];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1172626, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n]\n\nvar x = todos[0]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1174570, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n]\n\nvar x = todos[0]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1176028, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n]\n\nvar x = todos[0]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1220379, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1224582, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1255642, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1263330, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1264442, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1266400, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\nx ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1268118, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\nx ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1271429, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\nx", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1276043, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\nx[]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1281567, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\nto[]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1283230, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\nto[]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1284379, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\nto[]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1285830, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1287743, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20]", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1291530, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[19] =", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1293406, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[19] =", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1294467, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[19] =", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1295681, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] = ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1298006, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] = ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1300030, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] =  ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1305181, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] = 1 ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1306221, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] = 1 ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1307980, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] = 1 ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1309102, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] = 1 ", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1314256, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] = 1", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1315967, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] = 1", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1318956, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] = 1;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1320719, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nvar x = todos[0];\ntodos[20] = 1;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1423986, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos)\nvar x = todos[0];\ntodos[20] = 1;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1425277, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos)\nvar x = todos[0];\ntodos[20] = 1;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1427174, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1428381, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1429408, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1595560, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1597611, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1598650, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos.uns", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1600119, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos.uns", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1602720, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos.unshift()", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1604038, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos.unshift()", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1605807, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos.unshift()", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1610790, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos.unshift(\"coś do do\")", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1613563, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos.unshift(\"coś do do\")", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1614694, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos.unshift(\"coś do dopisania\")", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1619589, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos.unshift(\"coś do dopisania\");", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1620792, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos[20] = 1;\ntodos.unshift(\"coś do dopisania\");", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1716884, "code" : { "id" : "basics1", "name" : "Podstawy JS", "title" : "Podstawy JS - Tablice i Literały", "monitor" : "todos", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var todos = [\n    \"Przyjdź na Devmeeting\", \n    \"Naucz się podstaw JavaScript\",\n    \"I zostań ninja developerem\"\n];\n\nconsole.log(todos);\n\nvar x = todos[0];\ntodos.unshift(\"coś do dopisania\");", "size" : "lg" }, "stream" : true, "microtasks" : [ { "monitor" : "todos", "description" : "Dodaj jeszcze jedno zadanie do tablicy <code>todos</code>", "hint" : "Skopiuj tekst zadania i wklej poniżej po przecinku", "js_assert" : "return todos[2] !== undefined" }, { "hint" : "Użyj <code>todos[0]</code> i przypisz tę wartość do zmiennej <code>x</code>", "description" : "Zapisz pierwsze zadanie do zmiennej o nazwie <code>x</code>", "js_assert" : "return x === todos[0];", "monitor" : [ "x", "todos" ] }, { "monitor" : "todos", "js_assert" : "return todos[20] !== undefined;", "hint" : "Przypisz coś do <code>todos[20]</code>", "description" : "Wstaw zadanie na <code>20</code> pozycji" }, { "js" : "todos\\.unshift\\s*\\(.+?\\)", "hint" : "Wywołaj <code>todos.unshift()</code> z odpowiednim argumentem.", "description" : "Użyj metody <code>unshift</code> żeby dodać coś do tablicy <code>todos</code>" } ] } }, { "timestamp" : 1729860, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var todo = {\n    title: \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1803807, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"asd\";\nvar todo = {\n    title: \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1804855, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"asd\";\nvar todo = {\n    title: \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1805957, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"asd\";\nvar todo = {\n    title: \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1807135, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"asd\";\nvar todo = {\n    title: \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1859198, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"asd\";\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1860752, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"asd\";\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1862000, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"asd\";\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1865678, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1890880, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var t\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1892754, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var t\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1894416, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1895791, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1899892, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"Pod\"\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1901043, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"Pod\"\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1902842, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"Pod\"\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1904154, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"Podstawy JS- Obie\"\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1905167, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"Podstawy JS- Obie\"\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1906303, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"Podstawy JS- Obie\"\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1907392, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"Podstawy JS- Obiekty\";\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1910892, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = \"Podstawy JS- Obiekty\";\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1919316, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = ;\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1920820, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = ;\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1921829, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = ;\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1923518, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = todo.title;\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1924553, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = todo.title;\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1926479, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "var title = todo.title;\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1947831, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1949414, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1957920, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\ntodo = title;", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1958942, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\ntodo = title;", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1960028, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\ntodo = title;", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1985137, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1987487, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 1999121, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2000170, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2001376, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2002691, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2003765, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2005261, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2006762, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2008859, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2034888, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];\n\nconsole.log(five);", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2035926, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];\n\nconsole.log(five);", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2037000, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];\n\nconsole.log(five);", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2038536, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];\n\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2041736, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];\n\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2050972, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2051988, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2115286, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo.0;\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2120380, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2121949, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo[0];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2123528, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo['0'];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2125522, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo.title;\nvar five = todo['0'];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2129302, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2131526, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2151973, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 2]\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2153213, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 2]\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2154285, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 2]\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2156179, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2157559, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = five", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2160209, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x[0]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2161437, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x[0]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2162729, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x[0]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2169778, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2172761, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2213912, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 4\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2215206, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 4\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2217834, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\"\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2219050, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\"\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2220570, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\"\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2231363, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\":\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2232659, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\":\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2234399, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\":1\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2236033, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\":1\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2239090, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\"\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x['1']", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2247081, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x[1]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2249120, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x[1]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2258136, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\ntodo = x[10]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2266168, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\nconsole.log(x[10]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2267323, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\nconsole.log(x[10]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2268539, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\nconsole.log(x[10]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2269553, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\nconsole.log(x[10])", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2271308, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\nconsole.log(x[10])", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2305334, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\nconsole.log(x[10])", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2307255, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\nconsole.log(x[10])", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2308327, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nvar x = [1, 2, 3];\nvar title = todo['title'];\nvar five = todo['0'];\n\nconsole.log(x[10])", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2346398, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\ntodo[]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2347824, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\ntodo[]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2348853, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\ntodo[]", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2350054, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\ntodo[\"2\"] ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2351848, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\ntodo[\"2\"] ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2355728, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"] ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2358756, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3] ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2359927, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3] ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2361281, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3] ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2362317, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]); ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2363455, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]); ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2374509, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3], todo); ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2375605, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3], todo); ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2380617, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]);\nconsole.log(todo)", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2381845, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]);\nconsole.log(todo)", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2382969, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]);\nconsole.log(todo)", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2384157, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]);\nconsole.log(todo)", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2389292, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]);\nconsole.dir(todo)", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2390306, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]);\nconsole.dir(todo)", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2409045, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]);\nconsole.dir(todo.hasOwnProperty(\"2\"))", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2410121, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]);\nconsole.dir(todo.hasOwnProperty(\"2\"))", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2411187, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]);\nconsole.dir(todo.hasOwnProperty(\"2\"))", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2412306, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};\nconsole.log(todo[\"2\"], todo[3]);\nconsole.dir(todo.hasOwnProperty(\"2\"))", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2425041, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5,\n    \"2\": undefined\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2430849, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2459238, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2465236, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2466787, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2468062, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2469187, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\nt\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2472062, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\nt\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2473323, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2475311, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2478098, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo )\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2480074, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo )\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2481399, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo ľ\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2482736, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo ľ\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2484775, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo \n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2486174, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo \n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2492517, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo {}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2498111, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo {}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2499135, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo {}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2500287, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo {}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2503075, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2505010, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2506262, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    \n}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2507725, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    \n}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2511888, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags\n}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2514549, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags\n}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2516605, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \n}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2523737, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2524799, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\n", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2564838, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.tit", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2566398, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.tit", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2568396, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2569591, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2571156, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2572319, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =\"test2\"", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2573573, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =\"test2\"", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2575167, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =\"test2\"", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2577109, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =\"test2\";", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2584558, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =\"test2\";\ntodo['completed'] = ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2585669, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =\"test2\";\ntodo['completed'] = ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2587139, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =\"test2\";\ntodo['completed'] = ", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2588260, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =\"test2\";\ntodo['completed'] = false;", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2589282, "code" : { "microtasks" : [ { "js" : "var\\s+title\\s*=\\s*todo.title", "hint" : "Utwórzy zmienną <code>var title</code> i przypisz do niej wartość pod <code>todo.title</code>", "description" : "Przypisz tytuł zadania do zmiennej <code>title</code>" }, { "description" : "Zapisz wartość, która leży pod kluczem <code>0</code> do zmiennej <code>five</code>", "hint" : "Odwołaj się przez <code>todo[0]</code>", "js" : "var\\s+five\\s*=\\s*todo\\s*\\['?\"?0'?\"?\\]" }, { "description" : "Dopisz pole <code>tags</code> do obiektu <code>todo</code>", "hint" : "Przypisz coś do <code>todo.tags</code>", "monitor" : "todo", "js_assert" : "return todo.tags !== undefined" } ], "stream" : true, "code" : { "size" : "lg", "content" : "\nvar todo = {\n    \"title\": \"Checkout project from github\",\n    \"completed\": true,\n    \"0\": 5\n};\n\ntodo = {\n    tags: \"test\"\n}\ntodo.title =\"test2\";\ntodo['completed'] = false;", "mode" : "javascript" }, "jsrunner" : true, "monitor" : "todo", "title" : "Podstawy JS - Obiekty", "name" : "Obiekty", "id" : "basics1" } }, { "timestamp" : 2607443, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2786617, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2788190, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2789965, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2792989, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar s\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2794215, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar s\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2795939, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar s\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2797290, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub \nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2798351, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub \nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2804764, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = func\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2805777, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = func\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2806826, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = func\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2808640, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function()\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2810214, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function()\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2824664, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function()\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2856140, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) \n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2858190, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) \n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2859227, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2862043, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2863265, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    reutrn\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2865994, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    reutrn\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2867177, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a \n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2868203, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a \n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2869978, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a \n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2871014, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - bl\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2873474, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - bl\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2874878, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2875964, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2882675, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, )\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2883836, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, )\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2884924, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, )\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2886022, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2901528, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar \nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2903297, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar \nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2904636, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2905734, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2909200, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = funct\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2910310, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = funct\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2911356, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = funct\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2912454, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function()\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2913994, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function()\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2920954, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(){\n    \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2922158, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(){\n    \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2942224, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(){\n    var arg \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2943272, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(){\n    var arg \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2944290, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(){\n    var arg \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2950041, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(){\n    \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2951202, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(){\n    \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2970530, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 2973690, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3003404, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1.\n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3004428, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1.\n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3005632, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1.\n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3009123, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1.\n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3011641, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1.\n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3014754, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3016187, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3031000, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\ninvoke(function())\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3032085, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\ninvoke(function())\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3033498, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\ninvoke(function())\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3034612, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\ninvoke(function(){\n    \n})\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3037240, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\ninvoke(function(){\n    \n})\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3038970, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = \nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3041109, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = \nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3042256, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3043288, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3044577, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    \n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3045904, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"\")\n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3047746, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"\")\n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3048772, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"\")\n}\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3049836, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3050887, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3052632, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3069802, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3074301, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\n\nx(\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3075678, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\n\nx(\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3078198, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\n\ninvoke()\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3080968, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\n\ninvoke()\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3082359, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\n\ninvoke(x)\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3095432, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\nvar y = x;\n\ninvoke(x)\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3096468, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    arg1();\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\nvar y = x;\n\ninvoke(x)\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3139939, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    return arg1;\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\nvar y = x;\n\ninvoke(x)\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3142744, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar invoke = function(arg1){\n    return arg1;\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\nvar y = x;\n\ninvoke(x)\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3145784, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar getFunc = function(arg1){\n    return arg1;\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\nvar y = x;\n\ninvoke(x)\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3147088, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar getFunc = function(arg1){\n    return arg1;\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\nvar y = x;\n\ninvoke(x)\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3154109, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar getFunc = function(){\n    return arg1;\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\nvar y = x;\n\ninvoke(x)\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3161368, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar getFunc = function(){\n    return sum;\n}\nvar x = function() {\n    console.log(\"XYZ\");\n};\nvar y = x;\n\ninvoke(x)\n\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3167253, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar getFunc = function(){\n    return sum;\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3168791, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar getFunc = function(){\n    return sum;\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3185904, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar getFunc = function(){\n    return function(){\n        \n    };\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3186936, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar getFunc = function(){\n    return function(){\n        \n    };\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3188178, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar sub = function(a, b) {\n    return a - b;\n}\nvar getFunc = function(){\n    return function(){\n        \n    };\n}\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4),\n    sub: sub(0, 10)\n};\n\n", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3205553, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\n\nvar re", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3207753, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\n\nvar re", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3208841, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3209972, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3212008, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3309884, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = fi\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3311020, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = fi\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3312604, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = fi\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3313973, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n}\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3315051, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n}\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3316374, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n}\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3317728, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n        \n    }\n}\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3319186, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n        \n    }\n}\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3323980, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n        hello: \"World\"\n    };\n}\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3325123, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n        hello: \"World\"\n    };\n}\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3326281, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n        hello: \"World\"\n    };\n}\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3327464, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n        hello: \"World\"\n    };\n};\n\n\nvar result;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3331540, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n        hello: \"World\"\n    };\n};\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3341473, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return {\n        hello: \"World\"\n    };\n};\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3352862, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return {\n        hello: \"World\"\n    }\n}\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3354011, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return {\n        hello: \"World\"\n    }\n}\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3357275, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return {\n        hello: \"World\"\n    }\n}\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3360523, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return \n    {\n        hello: \"World\"\n    }\n}\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3361572, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return \n    {\n        hello: \"World\"\n    }\n}\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3378655, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return \n    {\n        hello: \"World\"\n    }\n}\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3383095, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return \n    {\n        hello: \"World\"\n    };\n};\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3386780, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return; \n    {\n        hello: \"World\"\n    };\n};\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3389365, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return; \n    {\n        hello: \"World\"\n    };\n};\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3402257, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return {\n        hello: \"World\"\n    }\n}\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3403882, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return {\n        hello: \"World\"\n    }\n}\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3405255, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() \n{\n    return {\n        hello: \"World\"\n    }\n}\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3406510, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n        hello: \"World\"\n    }\n}\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3430354, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n        hello: \"World\"\n    };\n};\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3432717, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "\nvar f = function() {\n    return {\n        hello: \"World\"\n    };\n};\n\n\nvar result = f();", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3454853, "code" : { "id" : "basics1", "name" : "Funkcje", "title" : "Podstawy JS - Funkcje", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "function sum(a, b) {\n    return a + b;\n}\n\nvar mult = function(a, b) {\n  return a * b;  \n};\n\nvar result = {\n    sum: sum(2, 4),\n    mult: mult(2, 4)\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>sub</code> która odejmuje dwie liczby", "hint" : "Użyj notacji <code>function sub() {}</code> lub <code>var sub = function() {}</code>", "js_assert" : "return sub(7, 8) === -1;", "monitor" : "sub" }, { "description" : "Stwórz funkcję <code>invoke</code> która wywołuje pierwszy argument.", "hint" : "Możesz założyć, że przekazany argument jest funkcją i go wywołać <code>x()</code>", "js_assert" : "var done = false; invoke(function() { done = true }); return done;", "monitor" : "invoke" }, { "monitor" : "getFunc", "js_assert" : "return typeof getFunc() === 'function'", "hint" : "Możesz po prostu zwrócić funkcję anonimową <code>return function(){}</code> lub wykorzystać istniejące funkcje", "description" : "Stwórz funkcję <code>getFunc</code>, która zwraca inną funkcję" } ] } }, { "timestamp" : 3459714, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    }\n}\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3502102, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    }\n}\n\nconsole.log()\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3503548, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    }\n}\n\nconsole.log()\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3508048, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    }\n}\n\nconsole.error\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3509700, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    }\n}\n\nconsole.error\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3513025, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    }\n}\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3570604, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    }\n    \n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3573897, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    }\n    \n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3578434, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3579685, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3582784, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub: f\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3584033, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub: f\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3585360, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub: f\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3586721, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : f\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3588471, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : f\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3589746, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3591008, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3592296, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3593445, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b)\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3594620, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b)\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3596572, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) \n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3598471, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) \n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3600258, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        \n    }\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3602085, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        \n    }\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3606695, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3607821, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3609285, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3616079, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3619306, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3641035, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calcu\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3642225, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calcu\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3643705, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calcu\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3645218, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3646316, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3647412, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: calculator.sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3657199, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3658321, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3709275, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\nconsole.", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3710499, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\nconsole.", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3711553, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\nconsole.", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3713153, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\nconsole.dir(cal)", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3715832, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\nconsole.dir(cal)", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3717105, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\nconsole.dir(calculator);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3718160, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\nconsole.dir(calculator);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3720126, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\nconsole.dir(calculator);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3729681, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.kig(calculator);\nconsole.dir(calculator);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3732045, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.kig(calculator);\nconsole.dir(calculator);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3733302, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator);\nconsole.dir(calculator);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3734373, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator);\nconsole.dir(calculator);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3741089, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator);\nconsole.dir(calculator);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3743111, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator);\nconsole.dir(calculator);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3778788, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(calculator, su);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3779790, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(calculator, su);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3781461, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(calculator, su);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3782693, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(calculator, sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3788102, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(su;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3790633, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(su;", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3791650, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\n\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3831210, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nconsole.log()\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3832214, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nconsole.log()\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3833478, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nconsole.log()\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3834839, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nconsole.log(sum.toString)\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3835990, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nconsole.log(sum.toString)\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3837661, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nconsole.log(sum.toString)\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3838689, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3841229, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3861974, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsu\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3864271, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsu\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3865481, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nvar \nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3866660, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nvar \nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3869733, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3871160, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3872290, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3876271, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.tes\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3877402, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.tes\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3879959, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString()\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3881438, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString()\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3882447, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString()\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3884062, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= \"\"\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3885174, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= \"\"\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3887324, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= functi\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3888609, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= functi\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3890498, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= function(){\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3891516, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= function(){\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3893182, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= function(){\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3894657, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= function(){\nsu\n}\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3898338, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= function(){\nsum \n}\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3900142, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= function(){\nsum \n}\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3902026, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= function(){\n return 1;\n}\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3903876, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= function(){\n return 1;\n}\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3905253, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= function(){\n return 1;\n}\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3911633, "code" : { "name" : "Metody", "title" : "Podstawy JS - Metody", "monitor" : "result", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var calculator = {\n    sum : function(a, b) {\n        return a + b;\n    },\n    sub : function(a, b) {\n        return a - b;\n    }\n};\nvar sum = calculator.sum;\nsum.toString= function(){\n return 1;\n}\nconsole.log(sum.toString());\nvar result = {\n    sum: sum(2, 4),\n    sumFunction: calculator.sum.toString()\n};\n\nconsole.log(calculator, sum);\nconsole.dir(sum);", "size" : "lg" }, "stream" : true, "microtasks" : [ { "description" : "Stwórz funkcję <code>calculator.sub</code> która odejmuje dwie liczby", "hint" : "Dopisz funkcję dynamicznie używając <code>calculator.sub</code> lub dodaj ją do literału", "js_assert" : "return calculator.sub(7, 8) === -1;", "monitor" : "calculator" }, { "monitor" : "sum", "js_assert" : "return sum(4, 10) === 14;", "hint" : "Utwórz zmienną <code>var sum</code> i przypisz do niej odpowiednią funkcję.", "description" : "Przypisz funkcję <code>calculator.sum</code> do zmiennej <code>sum</code>" }, { "description" : "Wypisz obiekt <code>calculator</code> na konsolę.", "hint" : "Wywołaj <code>console.log</code> z argumentem <code>calculator</code>", "js" : "console\\.log\\s*\\(\\s*calculator\\s*\\)" } ] } }, { "timestamp" : 3999455, "code" : { "id" : "html", "name" : "HTML", "title" : "HTML - oldschool", "microtasks" : [ { "description" : "Zmień tytuł strony na <code>HTML5 Rocks</code>", "hint" : "Znajdź znacznik <code>&lt;title&gt;</code> i zmień jego wartość", "html" : "<TITLE>HTML5 Rocks</TITLE>" }, { "description" : "Dodaj klasę <code>deprecated</code> do elementu <code>html</code>", "hint" : "Zmień znacznik <code>&lt;html&gt;</code> na górze na <code>&lt;html class=\"deprecated\"&gt;</code>", "html" : "<HTML class=\"deprecated\">" } ], "stream" : true, "fiddle" : { "pure" : true, "size" : "xl", "html" : "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<HTML>\n<HEAD>\n <META HTTP-EQUIV=\"KeyWords\" CONTENT=\"Wirtualna Polska\">\n <META Name=\"Language\" CONTENT=\"Polski\">\n <title>HTML Sucks</title>\n <style type=\"text/css\">html.deprecated { display: none }</style>\n</HEAD>\n<BODY BGCOLOR=\"Red\" LINK=\"#013E87\" VLINK=\"#013E87\" TEXT=\"#013E87\" ALINK=\"#C2010B\">\n<CENTER>\n<TABLE ALIGN=\"Center\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"600\" BGCOLOR=\"#FFFFFF\">\n<TR BGCOLOR=\"#D3E1ED\"><TD VALIGN=\"Middle\" WIDTH=\"288\">\n  <NOBR>\n    <H1 id=a></H1>\n  </NOBR>\n</TD><TD  VALIGN=\"Middle\" WIDTH=\"140\" ALIGN=\"Left\" COLSPAN=2>\n   <FONT FACE=\"Arial CE\"  COLOR=\"#1A3C73\" SIZE=-2 class=\"st\">\n        Hello World!\n   </font>\n</td></TR><TR><TD>\n    <input type=\"button\" \n        value=\"Click Me!\" \n        onclick=\"document.getElementById('a').innerHTML = 'Awesome!'\">\n            \n</TD></TR>\n</TABLE>\n</CENTER>\n</BODY>\n</HTML>\n" } } }, { "timestamp" : 4171803, "code" : { "id" : "html", "name" : "HTML", "title" : "HTML - oldschool", "microtasks" : [ { "description" : "Zmień tytuł strony na <code>HTML5 Rocks</code>", "hint" : "Znajdź znacznik <code>&lt;title&gt;</code> i zmień jego wartość", "html" : "<TITLE>HTML5 Rocks</TITLE>" }, { "description" : "Dodaj klasę <code>deprecated</code> do elementu <code>html</code>", "hint" : "Zmień znacznik <code>&lt;html&gt;</code> na górze na <code>&lt;html class=\"deprecated\"&gt;</code>", "html" : "<HTML class=\"deprecated\">" } ], "stream" : true, "fiddle" : { "pure" : true, "size" : "xl", "html" : "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<HTML>\n<HEAD>\n <META HTTP-EQUIV=\"KeyWords\" CONTENT=\"Wirtualna Polska\">\n <META Name=\"Language\" CONTENT=\"Polski\">\n <title>HTML Sucks</title>\n <style type=\"text/css\">html.deprecated { display: none }</style>\n</HEAD>\n<BODY BGCOLOR=\"white\" LINK=\"#013E87\" VLINK=\"#013E87\" TEXT=\"#013E87\" ALINK=\"#C2010B\">\n<CENTER>\n<TABLE ALIGN=\"Center\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"600\" BGCOLOR=\"#FFFFFF\">\n<TR BGCOLOR=\"#D3E1ED\"><TD VALIGN=\"Middle\" WIDTH=\"288\">\n  <NOBR>\n    <H1 id=a></H1>\n  </NOBR>\n</TD><TD  VALIGN=\"Middle\" WIDTH=\"140\" ALIGN=\"Left\" COLSPAN=2>\n   <FONT FACE=\"Arial CE\"  COLOR=\"#1A3C73\" SIZE=-2 class=\"st\">\n        Hello World!\n   </font>\n</td></TR><TR><TD>\n    <input type=\"button\" \n        value=\"Click Me!\" \n        onclick=\"document.getElementById('a').innerHTML = 'Awesome!'\">\n            \n</TD></TR>\n</TABLE>\n</CENTER>\n</BODY>\n</HTML>\n" } } }, { "timestamp" : 4172939, "code" : { "id" : "html", "name" : "HTML", "title" : "HTML - oldschool", "microtasks" : [ { "description" : "Zmień tytuł strony na <code>HTML5 Rocks</code>", "hint" : "Znajdź znacznik <code>&lt;title&gt;</code> i zmień jego wartość", "html" : "<TITLE>HTML5 Rocks</TITLE>" }, { "description" : "Dodaj klasę <code>deprecated</code> do elementu <code>html</code>", "hint" : "Zmień znacznik <code>&lt;html&gt;</code> na górze na <code>&lt;html class=\"deprecated\"&gt;</code>", "html" : "<HTML class=\"deprecated\">" } ], "stream" : true, "fiddle" : { "pure" : true, "size" : "xl", "html" : "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<HTML>\n<HEAD>\n <META HTTP-EQUIV=\"KeyWords\" CONTENT=\"Wirtualna Polska\">\n <META Name=\"Language\" CONTENT=\"Polski\">\n <title>HTML Sucks</title>\n <style type=\"text/css\">html.deprecated { display: none }</style>\n</HEAD>\n<BODY BGCOLOR=\"white\" LINK=\"#013E87\" VLINK=\"#013E87\" TEXT=\"#013E87\" ALINK=\"#C2010B\">\n<CENTER>\n<TABLE ALIGN=\"Center\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"600\" BGCOLOR=\"#FFFFFF\">\n<TR BGCOLOR=\"#D3E1ED\"><TD VALIGN=\"Middle\" WIDTH=\"288\">\n  <NOBR>\n    <H1 id=a></H1>\n  </NOBR>\n</TD><TD  VALIGN=\"Middle\" WIDTH=\"140\" ALIGN=\"Left\" COLSPAN=2>\n   <FONT FACE=\"Arial CE\"  COLOR=\"#1A3C73\" SIZE=-2 class=\"st\">\n        Hello World!\n   </font>\n</td></TR><TR><TD>\n    <input type=\"button\" \n        value=\"Click Me!\" \n        onclick=\"document.getElementById('a').innerHTML = 'Awesome!'\">\n            \n</TD></TR>\n</TABLE>\n</CENTER>\n</BODY>\n</HTML>\n" } } }, { "timestamp" : 4174036, "code" : { "id" : "html", "name" : "HTML", "title" : "HTML - oldschool", "microtasks" : [ { "description" : "Zmień tytuł strony na <code>HTML5 Rocks</code>", "hint" : "Znajdź znacznik <code>&lt;title&gt;</code> i zmień jego wartość", "html" : "<TITLE>HTML5 Rocks</TITLE>" }, { "description" : "Dodaj klasę <code>deprecated</code> do elementu <code>html</code>", "hint" : "Zmień znacznik <code>&lt;html&gt;</code> na górze na <code>&lt;html class=\"deprecated\"&gt;</code>", "html" : "<HTML class=\"deprecated\">" } ], "stream" : true, "fiddle" : { "pure" : true, "size" : "xl", "html" : "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<HTML>\n<HEAD>\n <META HTTP-EQUIV=\"KeyWords\" CONTENT=\"Wirtualna Polska\">\n <META Name=\"Language\" CONTENT=\"Polski\">\n <title>HTML Sucks</title>\n <style type=\"text/css\">html.deprecated { display: none }</style>\n</HEAD>\n<BODY BGCOLOR=\"white\" LINK=\"#013E87\" VLINK=\"#013E87\" TEXT=\"#013E87\" ALINK=\"#C2010B\">\n<CENTER>\n<TABLE ALIGN=\"Center\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"600\" BGCOLOR=\"#FFFFFF\">\n<TR BGCOLOR=\"#D3E1ED\"><TD VALIGN=\"Middle\" WIDTH=\"288\">\n  <NOBR>\n    <H1 id=a></H1>\n  </NOBR>\n</TD><TD  VALIGN=\"Middle\" WIDTH=\"140\" ALIGN=\"Left\" COLSPAN=2>\n   <FONT FACE=\"Arial CE\"  COLOR=\"#1A3C73\" SIZE=-2 class=\"st\">\n        Hello World!\n   </font>\n</td></TR><TR><TD>\n    <input type=\"button\" \n        value=\"Click Me!\" \n        onclick=\"document.getElementById('a').innerHTML = 'Awesome!'\">\n            \n</TD></TR>\n</TABLE>\n</CENTER>\n</BODY>\n</HTML>\n" } } }, { "timestamp" : 4175424, "code" : { "id" : "html", "name" : "HTML", "title" : "HTML - oldschool", "microtasks" : [ { "description" : "Zmień tytuł strony na <code>HTML5 Rocks</code>", "hint" : "Znajdź znacznik <code>&lt;title&gt;</code> i zmień jego wartość", "html" : "<TITLE>HTML5 Rocks</TITLE>" }, { "description" : "Dodaj klasę <code>deprecated</code> do elementu <code>html</code>", "hint" : "Zmień znacznik <code>&lt;html&gt;</code> na górze na <code>&lt;html class=\"deprecated\"&gt;</code>", "html" : "<HTML class=\"deprecated\">" } ], "stream" : true, "fiddle" : { "pure" : true, "size" : "xl", "html" : "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<HTML>\n<HEAD>\n <META HTTP-EQUIV=\"KeyWords\" CONTENT=\"Wirtualna Polska\">\n <META Name=\"Language\" CONTENT=\"Polski\">\n <title>HTML Sucks</title>\n <style type=\"text/css\">html.deprecated { display: none }</style>\n</HEAD>\n<BODY BGCOLOR=\"white\" LINK=\"#013E87\" VLINK=\"#013E87\" TEXT=\"#013E87\" ALINK=\"#C2010B\">\n<CENTER>\n<TABLE ALIGN=\"Center\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"600\" BGCOLOR=\"#FFFFFF\">\n<TR BGCOLOR=\"#D3E1ED\"><TD VALIGN=\"Middle\" WIDTH=\"288\">\n  <NOBR>\n    <H1 id=a></H1>\n  </NOBR>\n</TD><TD  VALIGN=\"Middle\" WIDTH=\"140\" ALIGN=\"Left\" COLSPAN=2>\n   <FONT FACE=\"Arial CE\"  COLOR=\"#1A3C73\" SIZE=-2 class=\"st\">\n        Hello World!\n   </font>\n</td></TR><TR><TD>\n    <input type=\"button\" \n        value=\"Click Me!\" \n        onclick=\"document.getElementById('a').innerHTML = 'Awesome!'\">\n            \n</TD></TR>\n</TABLE>\n</CENTER>\n</BODY>\n</HTML>\n" } } }, { "timestamp" : 4191771, "code" : { "id" : "html", "name" : "HTML", "title" : "HTML - oldschool", "microtasks" : [ { "description" : "Zmień tytuł strony na <code>HTML5 Rocks</code>", "hint" : "Znajdź znacznik <code>&lt;title&gt;</code> i zmień jego wartość", "html" : "<TITLE>HTML5 Rocks</TITLE>" }, { "description" : "Dodaj klasę <code>deprecated</code> do elementu <code>html</code>", "hint" : "Zmień znacznik <code>&lt;html&gt;</code> na górze na <code>&lt;html class=\"deprecated\"&gt;</code>", "html" : "<HTML class=\"deprecated\">" } ], "stream" : true, "fiddle" : { "pure" : true, "size" : "xl", "html" : "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<HTML class=\"deprec>\n<HEAD>\n <META HTTP-EQUIV=\"KeyWords\" CONTENT=\"Wirtualna Polska\">\n <META Name=\"Language\" CONTENT=\"Polski\">\n <title>HTML Sucks</title>\n <style type=\"text/css\">html.deprecated { display: none }</style>\n</HEAD>\n<BODY BGCOLOR=\"white\" LINK=\"#013E87\" VLINK=\"#013E87\" TEXT=\"#013E87\" ALINK=\"#C2010B\">\n<CENTER>\n<TABLE ALIGN=\"Center\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"600\" BGCOLOR=\"#FFFFFF\">\n<TR BGCOLOR=\"#D3E1ED\"><TD VALIGN=\"Middle\" WIDTH=\"288\">\n  <NOBR>\n    <H1 id=a></H1>\n  </NOBR>\n</TD><TD  VALIGN=\"Middle\" WIDTH=\"140\" ALIGN=\"Left\" COLSPAN=2>\n   <FONT FACE=\"Arial CE\"  COLOR=\"#1A3C73\" SIZE=-2 class=\"st\">\n        Hello World!\n   </font>\n</td></TR><TR><TD>\n    <input type=\"button\" \n        value=\"Click Me!\" \n        onclick=\"document.getElementById('a').innerHTML = 'Awesome!'\">\n            \n</TD></TR>\n</TABLE>\n</CENTER>\n</BODY>\n</HTML>\n" } } }, { "timestamp" : 4192827, "code" : { "id" : "html", "name" : "HTML", "title" : "HTML - oldschool", "microtasks" : [ { "description" : "Zmień tytuł strony na <code>HTML5 Rocks</code>", "hint" : "Znajdź znacznik <code>&lt;title&gt;</code> i zmień jego wartość", "html" : "<TITLE>HTML5 Rocks</TITLE>" }, { "description" : "Dodaj klasę <code>deprecated</code> do elementu <code>html</code>", "hint" : "Zmień znacznik <code>&lt;html&gt;</code> na górze na <code>&lt;html class=\"deprecated\"&gt;</code>", "html" : "<HTML class=\"deprecated\">" } ], "stream" : true, "fiddle" : { "pure" : true, "size" : "xl", "html" : "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<HTML class=\"deprec>\n<HEAD>\n <META HTTP-EQUIV=\"KeyWords\" CONTENT=\"Wirtualna Polska\">\n <META Name=\"Language\" CONTENT=\"Polski\">\n <title>HTML Sucks</title>\n <style type=\"text/css\">html.deprecated { display: none }</style>\n</HEAD>\n<BODY BGCOLOR=\"white\" LINK=\"#013E87\" VLINK=\"#013E87\" TEXT=\"#013E87\" ALINK=\"#C2010B\">\n<CENTER>\n<TABLE ALIGN=\"Center\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"600\" BGCOLOR=\"#FFFFFF\">\n<TR BGCOLOR=\"#D3E1ED\"><TD VALIGN=\"Middle\" WIDTH=\"288\">\n  <NOBR>\n    <H1 id=a></H1>\n  </NOBR>\n</TD><TD  VALIGN=\"Middle\" WIDTH=\"140\" ALIGN=\"Left\" COLSPAN=2>\n   <FONT FACE=\"Arial CE\"  COLOR=\"#1A3C73\" SIZE=-2 class=\"st\">\n        Hello World!\n   </font>\n</td></TR><TR><TD>\n    <input type=\"button\" \n        value=\"Click Me!\" \n        onclick=\"document.getElementById('a').innerHTML = 'Awesome!'\">\n            \n</TD></TR>\n</TABLE>\n</CENTER>\n</BODY>\n</HTML>\n" } } }, { "timestamp" : 4193916, "code" : { "id" : "html", "name" : "HTML", "title" : "HTML - oldschool", "microtasks" : [ { "description" : "Zmień tytuł strony na <code>HTML5 Rocks</code>", "hint" : "Znajdź znacznik <code>&lt;title&gt;</code> i zmień jego wartość", "html" : "<TITLE>HTML5 Rocks</TITLE>" }, { "description" : "Dodaj klasę <code>deprecated</code> do elementu <code>html</code>", "hint" : "Zmień znacznik <code>&lt;html&gt;</code> na górze na <code>&lt;html class=\"deprecated\"&gt;</code>", "html" : "<HTML class=\"deprecated\">" } ], "stream" : true, "fiddle" : { "pure" : true, "size" : "xl", "html" : "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<HTML class=\"deprec>\n<HEAD>\n <META HTTP-EQUIV=\"KeyWords\" CONTENT=\"Wirtualna Polska\">\n <META Name=\"Language\" CONTENT=\"Polski\">\n <title>HTML Sucks</title>\n <style type=\"text/css\">html.deprecated { display: none }</style>\n</HEAD>\n<BODY BGCOLOR=\"white\" LINK=\"#013E87\" VLINK=\"#013E87\" TEXT=\"#013E87\" ALINK=\"#C2010B\">\n<CENTER>\n<TABLE ALIGN=\"Center\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"600\" BGCOLOR=\"#FFFFFF\">\n<TR BGCOLOR=\"#D3E1ED\"><TD VALIGN=\"Middle\" WIDTH=\"288\">\n  <NOBR>\n    <H1 id=a></H1>\n  </NOBR>\n</TD><TD  VALIGN=\"Middle\" WIDTH=\"140\" ALIGN=\"Left\" COLSPAN=2>\n   <FONT FACE=\"Arial CE\"  COLOR=\"#1A3C73\" SIZE=-2 class=\"st\">\n        Hello World!\n   </font>\n</td></TR><TR><TD>\n    <input type=\"button\" \n        value=\"Click Me!\" \n        onclick=\"document.getElementById('a').innerHTML = 'Awesome!'\">\n            \n</TD></TR>\n</TABLE>\n</CENTER>\n</BODY>\n</HTML>\n" } } }, { "timestamp" : 4194970, "code" : { "id" : "html", "name" : "HTML", "title" : "HTML - oldschool", "microtasks" : [ { "description" : "Zmień tytuł strony na <code>HTML5 Rocks</code>", "hint" : "Znajdź znacznik <code>&lt;title&gt;</code> i zmień jego wartość", "html" : "<TITLE>HTML5 Rocks</TITLE>" }, { "description" : "Dodaj klasę <code>deprecated</code> do elementu <code>html</code>", "hint" : "Zmień znacznik <code>&lt;html&gt;</code> na górze na <code>&lt;html class=\"deprecated\"&gt;</code>", "html" : "<HTML class=\"deprecated\">" } ], "stream" : true, "fiddle" : { "pure" : true, "size" : "xl", "html" : "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<HTML class=\"deprecated\">\n<HEAD>\n <META HTTP-EQUIV=\"KeyWords\" CONTENT=\"Wirtualna Polska\">\n <META Name=\"Language\" CONTENT=\"Polski\">\n <title>HTML Sucks</title>\n <style type=\"text/css\">html.deprecated { display: none }</style>\n</HEAD>\n<BODY BGCOLOR=\"white\" LINK=\"#013E87\" VLINK=\"#013E87\" TEXT=\"#013E87\" ALINK=\"#C2010B\">\n<CENTER>\n<TABLE ALIGN=\"Center\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"600\" BGCOLOR=\"#FFFFFF\">\n<TR BGCOLOR=\"#D3E1ED\"><TD VALIGN=\"Middle\" WIDTH=\"288\">\n  <NOBR>\n    <H1 id=a></H1>\n  </NOBR>\n</TD><TD  VALIGN=\"Middle\" WIDTH=\"140\" ALIGN=\"Left\" COLSPAN=2>\n   <FONT FACE=\"Arial CE\"  COLOR=\"#1A3C73\" SIZE=-2 class=\"st\">\n        Hello World!\n   </font>\n</td></TR><TR><TD>\n    <input type=\"button\" \n        value=\"Click Me!\" \n        onclick=\"document.getElementById('a').innerHTML = 'Awesome!'\">\n            \n</TD></TR>\n</TABLE>\n</CENTER>\n</BODY>\n</HTML>\n" } } }, { "timestamp" : 4197093, "code" : { "id" : "html", "name" : "HTML", "title" : "HTML - oldschool", "microtasks" : [ { "description" : "Zmień tytuł strony na <code>HTML5 Rocks</code>", "hint" : "Znajdź znacznik <code>&lt;title&gt;</code> i zmień jego wartość", "html" : "<TITLE>HTML5 Rocks</TITLE>" }, { "description" : "Dodaj klasę <code>deprecated</code> do elementu <code>html</code>", "hint" : "Zmień znacznik <code>&lt;html&gt;</code> na górze na <code>&lt;html class=\"deprecated\"&gt;</code>", "html" : "<HTML class=\"deprecated\">" } ], "stream" : true, "fiddle" : { "pure" : true, "size" : "xl", "html" : "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 3.2 Final//EN\">\n<HTML class=\"deprecated\">\n<HEAD>\n <META HTTP-EQUIV=\"KeyWords\" CONTENT=\"Wirtualna Polska\">\n <META Name=\"Language\" CONTENT=\"Polski\">\n <title>HTML Sucks</title>\n <style type=\"text/css\">html.deprecated { display: none }</style>\n</HEAD>\n<BODY BGCOLOR=\"white\" LINK=\"#013E87\" VLINK=\"#013E87\" TEXT=\"#013E87\" ALINK=\"#C2010B\">\n<CENTER>\n<TABLE ALIGN=\"Center\" BORDER=\"0\" CELLSPACING=\"0\" CELLPADDING=\"0\" WIDTH=\"600\" BGCOLOR=\"#FFFFFF\">\n<TR BGCOLOR=\"#D3E1ED\"><TD VALIGN=\"Middle\" WIDTH=\"288\">\n  <NOBR>\n    <H1 id=a></H1>\n  </NOBR>\n</TD><TD  VALIGN=\"Middle\" WIDTH=\"140\" ALIGN=\"Left\" COLSPAN=2>\n   <FONT FACE=\"Arial CE\"  COLOR=\"#1A3C73\" SIZE=-2 class=\"st\">\n        Hello World!\n   </font>\n</td></TR><TR><TD>\n    <input type=\"button\" \n        value=\"Click Me!\" \n        onclick=\"document.getElementById('a').innerHTML = 'Awesome!'\">\n            \n</TD></TR>\n</TABLE>\n</CENTER>\n</BODY>\n</HTML>\n" } } }, { "timestamp" : 4241154, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-default js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}" } } }, { "timestamp" : 4617980, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}" } } }, { "timestamp" : 4619079, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}" } } }, { "timestamp" : 4620281, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}" } } }, { "timestamp" : 4621368, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}" } } }, { "timestamp" : 4690716, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    \n}" } } }, { "timestamp" : 4691762, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    \n}" } } }, { "timestamp" : 4692810, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    \n}" } } }, { "timestamp" : 4694095, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    content: 'J';\n}" } } }, { "timestamp" : 4695097, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    content: 'J';\n}" } } }, { "timestamp" : 4697536, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    : '';\n}" } } }, { "timestamp" : 4698642, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    : '';\n}" } } }, { "timestamp" : 4699745, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    : '';\n}" } } }, { "timestamp" : 4701740, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    content: 'Witaj';\n}" } } }, { "timestamp" : 4703149, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    content: 'Witaj';\n}" } } }, { "timestamp" : 4705012, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader :: after {\n    content: 'Witaj';\n}" } } }, { "timestamp" : 4711952, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader::after {\n    content: 'Witaj';\n}" } } }, { "timestamp" : 4718365, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}" } } }, { "timestamp" : 4853487, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\n" } } }, { "timestamp" : 4857577, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody\"\"" } } }, { "timestamp" : 4858646, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody\"\"" } } }, { "timestamp" : 4860327, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody\"\"" } } }, { "timestamp" : 4862368, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    b\n}" } } }, { "timestamp" : 4863468, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    b\n}" } } }, { "timestamp" : 4865016, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    b\n}" } } }, { "timestamp" : 4866295, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background\n}" } } }, { "timestamp" : 4867968, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background\n}" } } }, { "timestamp" : 4869012, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background\n}" } } }, { "timestamp" : 4870346, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color\":\"\n}" } } }, { "timestamp" : 4871528, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color\":\"\n}" } } }, { "timestamp" : 4873371, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color:;\n}" } } }, { "timestamp" : 4874470, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color:;\n}" } } }, { "timestamp" : 4875601, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color:;\n}" } } }, { "timestamp" : 4876700, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color: rgba(10,);\n}" } } }, { "timestamp" : 4877907, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color: rgba(10,);\n}" } } }, { "timestamp" : 4879182, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color: rgba(10,);\n}" } } }, { "timestamp" : 4880259, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color: rgba(10,126,10,0);\n}" } } }, { "timestamp" : 4881263, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color: rgba(10,126,10,0);\n}" } } }, { "timestamp" : 4882359, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color: rgba(10,126,10,0);\n}" } } }, { "timestamp" : 4883437, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color: rgba(10,126,10,0.3);\n}" } } }, { "timestamp" : 4885621, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody: {\n    background-color: rgba(10,126,10,0.3);\n}" } } }, { "timestamp" : 4899865, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody {\n    background-color: rgba(10,126,10,0.3);\n}" } } }, { "timestamp" : 4908592, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody {\n    background-color: rgba(10,126,10, 1.0);\n}" } } }, { "timestamp" : 4911773, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody {\n    background-color: rgba(10,126,10, 1.0);\n}" } } }, { "timestamp" : 4928748, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody {\n    background-color: rgba(10,126,10, 0.0);\n}" } } }, { "timestamp" : 4929904, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody {\n    background-color: rgba(10,126,10, 0.0);\n}" } } }, { "timestamp" : 4931263, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody {\n    background-color: rgba(10,126,10, 0.0);\n}" } } }, { "timestamp" : 4934073, "code" : { "id" : "html", "name" : "HTML5", "title" : "HTML5", "microtasks" : [ { "description" : "Zmień klasę przycisku na przycisk akcji", "hint" : "Użyj klasy <code>btn-primary</code> na przycisku.", "html" : "button.+?btn\\-primary" }, { "css" : "body\\s*{\\s*background-color\\s*:\\s*", "hint" : "W zakładce CSS dopisz regułę na element <code>body</code> i wpisz odpowiedni <code>background-color</code>", "description" : "Zmień kolor tła w CSS." } ], "stream" : true, "fiddle" : { "active" : "html", "pure" : true, "size" : "xl", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <title>HTML 5 Rocks!</title>\n    <link href=\"//maxcdn.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n   <section class=\"container\">\n       <header class=\"row\">\n           <h1 class=\"js--header col-xs-5\"></h1>\n           <aside class=\"col-xs-7\">\n               <p>Hello World!</p>\n           </aside>\n       </header>\n       <article class=\"row\">\n           <div class=\"col-xs-12\">\n               <button class=\"btn btn-primary js--btn\">\n                   Click Me!\n               </button>\n            </div>\n       </article>\n   </section>\n  </body>\n</html>\n", "js" : "var d = document;\nvar $header = d.querySelector('.js--header'),\n    $btn = d.querySelector('.js--btn');\n    \n$btn.addEventListener('click', function(){\n   $header.innerHTML = 'Awesome!'; \n});", "css" : "header {\n    background-color: rgba(10, 125, 10, 0.5);\n}\nheader ::after {\n    content: 'Witaj';\n}\nbody {\n    background-color: rgba(10,126,10, 0.5);\n}" } } }, { "timestamp" : 4948851, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5054160, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n\nvar" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5056682, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n\nvar" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5058433, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5066446, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.G$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5067508, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.G$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5068557, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.G$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5069682, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.getE$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5070806, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.getE$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5073732, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.getEle$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5076844, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.getE$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5080544, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.g$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5083271, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.g$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5084294, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5090970, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.query$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5092595, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.query$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5093646, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.query$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5094920, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5096120, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5097184, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector$('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5099007, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5108272, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5109394, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5110442, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5111651, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5112797, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5167922, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5169372, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5181472, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.tex\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5183321, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.tex\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5187033, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.textConte\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5188121, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.textConte\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5190771, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent()\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5196246, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = |\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5197634, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = |\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5199884, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"test\"\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5201521, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"test\"\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5202720, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"test\"\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5204222, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"test\";\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5221021, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"test\";\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5222308, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"test\";\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5223970, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"test\";\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5234258, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5235413, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5236506, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5237533, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar jqueryContent = $h1.html();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5259563, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar jqueryContent = $h1.innerHTML;\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5260645, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar jqueryContent = $h1.innerHTML;\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5261880, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar jqueryContent = $h1.innerHTML;\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5268486, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('.row h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML;\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5284615, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML;\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5329022, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML;\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5341610, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5343260, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML();\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5345447, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML=;\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5348202, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML=;\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5350234, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML = ;\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5351942, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML = ;\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5356361, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML = \"\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5357512, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML = \"\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5363674, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML = \"\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5364974, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"DOM - Vanilla.js\";\nvar content = $h1.innerHTML = \"\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5369510, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n$h1.textContent = \"\";\nvar content = $h1.innerHTML = \"DOM - Vanilla.js\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5372936, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"DOM - Vanilla.js\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5376447, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"DOM - Vanilla.js\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5401663, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5403133, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5406742, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\");\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5408867, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\");\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5409943, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar x = $h1\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\");\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5411947, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar x = $h1\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\");\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5412980, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar x = $h1.innerHTML;\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\");\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5414242, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar x = $h1.innerHTML;\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\");\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5415247, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar x = $h1.innerHTML;\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\");\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5427090, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5429185, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML(\"DOM - Vanilla.js\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5431597, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"DOM - Vanilla.js\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5474148, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5475316, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5476407, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelector('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5481113, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5486861, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log()\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5488123, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log()\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5489158, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log()\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5490171, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5491172, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5524928, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call()\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5526158, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call()\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5527179, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call()\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5528264, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function())\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5529613, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function())\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5530721, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function())\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5531924, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function($h){\n    \n})\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5533004, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function($h){\n    \n})\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5534430, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function($h){\n    \n})\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5550888, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function($h){\n    $h.inn\n})\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5552233, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function($h){\n    $h.inn\n})\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5553312, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function($h){\n    $h.inn\n})\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5554349, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function($h){\n    $h.innerHTML = \"asdf\";\n})\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5555572, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function($h){\n    $h.innerHTML = \"asdf\";\n})\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5556860, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n//$h1.text($h1.text() + \".jQuery.\");\n[].forEach.call($h1, function($h){\n    $h.innerHTML = \"asdf\";\n})\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5564070, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n$h1[0].innser\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5565220, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n$h1[0].innser\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5566394, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n$h1[0].innser\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5567512, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n$h1[0].innerHTML = \"\"\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5568544, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n$h1[0].innerHTML = \"\"\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5569701, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n$h1[0].innerHTML = \"\"\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5570849, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n$h1[0].innerHTML = \"123\";\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5571910, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n$h1[0].innerHTML = \"123\";\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5573224, "code" : { "name" : "Modyfikowanie DOM", "title" : "Hello DOM", "microtasks" : [ { "description" : "Zmień nagłówek strony na <code>DOM - Vanilla.js</code> w czystym JS", "hint" : "Przypisz tekst do <code>$h1.textContent</code>", "js_assert" : "return $h1.textContent === 'DOM - Vanilla.js';\n", "monitor" : "$h1" }, { "description" : "Zmień <code>querySelector</code> aby wyszukał dowolny element <code>h1</code>", "hint" : "Zmień selektor na <code>h1</code> zamiast <code>.row h1</code>", "js" : "querySelector\\(['\"]h1['\"]\\);\n" } ], "stream" : true, "left" : { "text" : "<h4>&nbsp;</h4>", "monitor" : "content", "jsrunner" : true, "code" : { "mode" : "javascript", "content" : "var $h1 = document.querySelectorAll('h1');\nconsole.log($h1);\n$h1[0].innerHTML = \"123\";\nvar content = $h1.innerHTML = \"sdf\";\n\n" } }, "right" : { "text" : "<h4>\n  <span class=\"glyphicon glyphicon-new-window text-muted\"></span>\n  <a class=\"jquery-link\" href=\"http://jquery.com/\" target=\"jquery\">What is jQuery?</a>\n</h4>\n", "code" : { "mode" : "javascript", "content" : "var $h1 = $('.row h1');\n$h1.text($h1.text() + \".jQuery.\");\n\nvar jqueryContent = $h1.html();\n" } } } }, { "timestamp" : 5581776, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5632563, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5633586, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5634937, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5636531, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setA\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5637538, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setA\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5638610, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setA\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5639662, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttri\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5640891, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttri\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5641914, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttri\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5643041, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttribute(\"\")\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5644101, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttribute(\"\")\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5645279, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttribute(\"\")\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5647005, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttribute(\"id\", \"link\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5648183, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttribute(\"id\", \"link\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5649450, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttribute(\"id\", \"link\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5650784, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttribute(\"id\", \"lin2k\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5652131, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.setAttribute(\"id\", \"lin2k\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5670498, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\ndocument.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5710021, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nbody.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5752276, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5758223, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5759506, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5771662, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\nconsole.log(window);\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5772796, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\nconsole.log(window);\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5774093, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\nconsole.log(window);\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5780395, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5794427, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5797493, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$lin\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5798814, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$lin\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5799914, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$lin\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5800989, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.class \n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5802140, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.class \n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5803256, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.class \n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5804355, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.class = \n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5806001, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.class = \n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5808428, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.class = \"\";\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5809578, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.class = \"\";\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5812266, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.class = \"\";\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5830539, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.className = \"btb\";\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5834065, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.className = \"btn b\";\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5835214, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.className = \"btn b\";\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5836652, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.className = \"btn b\";\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5837814, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.className = \"btn btn-default\";\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5839264, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.className = \"btn btn-default\";\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5840459, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.className = \"btn btn-default\";\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5866303, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n$link.className = \"btn btn-default\";\n\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5870386, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5872853, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5874037, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5875138, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5876626, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5877666, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList \n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5879917, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList \n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5883555, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList = \"\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5884921, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList = \"\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5886362, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList = \"\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5888575, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList = \"btn\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5889588, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList = \"btn\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5890887, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList = \"btn\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5898711, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5900349, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5903277, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn-primary\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5904526, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn-primary\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5905800, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn-primary\"\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5906898, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn-primary\")\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5910328, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn-primary\")''\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5914583, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn-primary\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5915623, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn-primary\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5928375, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn btn-primary\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5929564, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn btn-primary\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5942427, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn\"btn-primary\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5944756, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn\"btn-primary\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 5947187, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('a');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn\",\"btn-primary\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 6158612, "code" : { "notes" : "1. Talk about difference between `querySelector` and `querySelectorAll`\n2. Maybe someone will notice that strings are created via `'` not `\"`.\n", "fiddle" : { "size" : "xl", "js" : "var $link = document.createElement('button');\n$link.target = '_blank';\n$link.id = 'link';\n//$link.className = \"btn btn-default\";\n$link.classList.add(\"btn\",\"btn-primary\");\n$link.href = \n    'https://developer.mozilla.org/en-US/docs/Web/API/Element';\n$link.innerHTML = 'DOM: Element specification';\n\nwindow.document.body.appendChild($link);\n" }, "stream" : true, "microtasks" : [ { "js" : "\\$link\\.className\\s*=\\s*[\"']btn\\s+btn\\-default[\"'];\n", "hint" : "Użyj własności <code>className</code>", "description" : "Dodaj klasę <code>btn</code> oraz <code>btn-default</code> do elementu <code>$link</code>" }, { "js" : "\\$link\\.classList\\.add\\s*\\(\\s*['\"]btn-primary['\"]\\s*\\)", "hint" : "Wywołaj <code>$link.classList.add</code> aby dodać klasę.", "description" : "Dodaj klasę <code>btn-primary</code> używając <code>classList</code>" }, { "js" : "document\\.createElement\\([\"']button[\"']\\)\n", "hint" : "Zmodyfikuj wywołanie <code>document.createElement('a')</code>", "description" : "Stwórz przycisk <code>&lt;button&gt;</code> zamiast linku <code>&lt;a&gt;</code>" } ], "title" : "Tworzenie elementów DOM", "name" : "Wstawianie do DOM" } }, { "timestamp" : 6175155, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6252815, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6254219, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6257343, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nvar \n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6263980, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nvar one = \n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6275143, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nvar one = todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6276155, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nvar one = todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6277331, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nvar one = todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6280668, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nt todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6281680, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nt todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6284292, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\n todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6288044, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\n todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6289643, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\n todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6298117, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one - todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6299205, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one - todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6301143, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6302392, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos.ti\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6308967, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos.title\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6310080, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos.title\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6311331, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos.title\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6328981, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6330880, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6337092, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6339068, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6341144, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n\n$todos.innerHTML = \n    \"Uzyj <code>appendChild</code> zamiast <code>innerHTML</code>\";\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6348267, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n\n$todos.innerHTML = o", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6350844, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n\n$todos.innerHTML = o", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6351993, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n\n$todos.innerHTML = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6365695, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n\n$todos.innerHTML = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6366754, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n\n$todos.innerHTML = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6375444, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n$todos.innerHTML = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6393556, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6394710, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6395717, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6402188, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement \n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6403194, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement \n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6404361, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement \n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6405458, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6406595, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6408885, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<inp\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6411758, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<inp\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6415825, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"M\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6417724, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"M\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6418735, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"M\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6419745, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6420896, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6453162, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li></li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6454307, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li></li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6465324, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"</li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6466703, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"</li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6467951, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"</li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6469083, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+</li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6470223, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+</li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6475868, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+</li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6486106, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+one+</li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6487276, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+one+</li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6488365, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+one+</li>\"\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6490131, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6493205, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos. = one;", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6503223, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6504606, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6506704, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6562056, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.cre\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6563444, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.cre\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6565266, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.createElement\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6566351, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.createElement\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6567495, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.createElement\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6569400, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.createElement()\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6572605, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.createElement()\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6578406, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.createElement(\"\")\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6579550, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.createElement(\"\")\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6581275, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.createElement(\"\")\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6582544, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.createElement(\"li\");\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6584690, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\ndocument.createElement(\"li\");\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6591080, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6592587, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6600143, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6603364, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li. \nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6604806, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li. \nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6605884, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li. \nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6607036, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6617380, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent \nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6618717, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent \nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6619775, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent \nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6621449, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6622644, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6623790, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6625130, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n$\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6626477, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n$\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6627992, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n$\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6629131, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n$\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6634254, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.innerHTML = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6641004, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.append = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6642148, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.append = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6643463, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.append = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6644693, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6646303, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild = one;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6649100, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild = $li;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6650516, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild = $li;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6651671, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild = $li;\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6658187, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6659337, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6661450, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6665743, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n$li.\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6666884, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n$li.\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6668101, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n$li.\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6670476, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n$li.\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6672230, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n$li.\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6686350, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6688478, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\nvar domElement = \"<li>\"+one+\"</li>\";\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6690809, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6693900, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nfore\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6695589, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nfore\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6696723, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nfore\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6697854, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nforEach\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6699264, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\nforEach\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6702433, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6708698, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nforEacu\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6709722, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nforEacu\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6710780, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nforEacu\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6712324, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nfor\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6713400, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nfor\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6714885, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\nfor\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6717184, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodo,\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6719461, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodo,\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6720528, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodo.forEach(fu)\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6721663, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodo.forEach(fu)\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6722836, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodo.forEach(fu)\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6723940, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(fu)\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6727829, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(){\n    \n})\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6730173, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(){\n    \n})\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6731425, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo){\n    \n})\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6734521, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n})\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6735643, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n})\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6741106, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo,) {\n    \n});\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6744989, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo, i, a) {\n    \n});\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6746330, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo, i, a) {\n    \n});\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6748695, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo, i, arr) {\n    \n});\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6759501, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n});\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6769237, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    \n});\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6784314, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    \n});\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6787775, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    \n});\nvar one = todos[0].title;\n$li = document.createElement(\"li\");\n$li.textContent = one;\n\n$todos.appendChild($li);\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6793230, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6795719, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6797492, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    var one = todos[0].title;\n    $li = document.createElement(\"li\");\n    $li.textContent = one;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6799575, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    var one = todos[0].title;\n    $li = document.createElement(\"li\");\n    $li.textContent = one;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6800710, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    var one = todos[0].title;\n    $li = document.createElement(\"li\");\n    $li.textContent = one;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6808920, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) \n    $li = document.createElement(\"li\");\n    $li.textContent = one;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6811605, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) \n    $li = document.createElement(\"li\");\n    $li.textContent = one;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6813621, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $li = document.createElement(\"li\");\n    $li.textContent = ;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6816671, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $li = document.createElement(\"li\");\n    $li.textContent = todo;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6818259, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $li = document.createElement(\"li\");\n    $li.textContent = todo;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6820298, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.ti;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6821633, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.ti;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6823034, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.ti;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6824059, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6878461, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6879874, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6881983, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $ch\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6885701, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6886930, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6888879, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6889939, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6891237, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6892252, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6950195, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6951314, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6952344, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6953628, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.c\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6954693, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.c\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6955752, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.c\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6957327, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"\")\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6958572, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"\")\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6959862, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"\")\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6964738, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6967496, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6970345, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6971347, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6972752, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6975252, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"che\"\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6976532, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"che\"\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6977780, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"che\"\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6978888, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6980334, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6981354, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6982693, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6985121, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6986282, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chd.\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6987471, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chd.\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6990960, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chd.checked = \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6992225, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chd.checked = \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6993265, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chd.checked = \n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6995173, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chd.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6997037, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chd.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 6998194, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chd.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7009657, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7011081, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7023813, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7025271, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7031914, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.a\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7032981, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.a\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7040345, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.appendChild()\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7041583, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.appendChild()\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7042638, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.appendChild()\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7043794, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.appendChild($ch)\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7045380, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.appendChild($ch)\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7046989, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.appendChild($chk);\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7048527, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.appendChild($chk);\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7050404, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.textContent = todo.title;\n    $li.appendChild($chk);\n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7074384, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    \n    \n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7076518, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    \n    \n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7078018, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7079130, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7080252, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7143656, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(todo.title);\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7144691, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(todo.title);\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7145755, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(todo.title);\n    $li.textContent = todo.title;\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7147051, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(todo.title);\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7148867, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(todo.title);\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7195242, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title);\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7196329, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title);\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7197563, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title);\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7200677, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7365802, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7367413, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7368550, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7372065, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.cla\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7379739, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.clasName = \"\"\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7380977, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.clasName = \"\"\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7382308, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.clasName = \"\"\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7383451, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.clasName = \"list-group\"\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7384516, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.clasName = \"list-group\"\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7385885, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.clasName = \"list-group\"\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7386927, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.clasName = \"list-group\";\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7389326, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.clasName = \"list-group\";\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7396763, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.className = \"list-group\";\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7401313, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList = \"list-group\";\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7402497, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList = \"list-group\";\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7409188, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList(\"list-group\";\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7415889, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\"();\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7419377, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\"(());\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7420676, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\"(());\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7421853, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\"(());\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7423127, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7424501, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7425884, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7428922, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7465291, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7466727, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7468440, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.class\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7470661, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.class\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7472016, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7473166, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7474339, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7475938, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add)\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7477090, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add)\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7478197, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add)\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7479514, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\\)\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7480560, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\\)\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7482889, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"item-l\")\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7484277, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"item-l\")\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7485652, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"item-l\")\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7486813, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list\")\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7488389, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list\")\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7489525, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list\")\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7491002, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\")\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7492439, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\")\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7499139, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7561247, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7564324, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7585457, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7588040, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7590569, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7599028, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7604323, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7608575, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7620682, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n$chk;\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7621891, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n$chk;\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7623601, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n$chk;\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7626961, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7628137, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7629297, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7630773, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk)\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7632183, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk)\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7634694, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var$chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7638652, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7650066, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7742107, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    if (true) {\n        \n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7743217, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    if (true) {\n        \n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7744638, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    if (true) {\n        \n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7745757, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    if (true) {\n        var x = \n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7747570, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    if (true) {\n        var x = \n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7749104, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    if (true) {\n        var x = 123;\n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7750180, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    if (true) {\n        var x = 123;\n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7764551, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    \n        var x = 123;\n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7765703, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n    var $chk = document.createElement(\"input\");\n    $chk.type = \"checkbox\";\n    $chk.checked = todo.completed;\n    var $li = document.createElement(\"li\");\n    $li.classList.add(\"list-group-item\");\n    \n        var x = 123;\n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7768854, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n        \n        var x = 123;\n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7769865, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n        \n        var x = 123;\n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7771544, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n        \n        var x = 123;\n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\nconsole.log($chk);\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7773111, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7774270, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7777095, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n    }\n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7799650, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n    }\n    \n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7801461, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n    }\n    \n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7802756, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n    if (true) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n    }\n    \n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7814604, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n    \n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } }, { "timestamp" : 7817449, "code" : { "fiddle" : { "js" : "var todos = [{\n  title: \"Przyjsc na Devmeeting\",\n  completed: true\n}, {\n  title: \"Nauczyc sie JavaScriptu!\",\n  completed: false\n}];\n\n// Wyswietl zadania tworzac element drzewa DOM\nvar d = document;\nvar $todos = d.querySelector('.todos');\n$todos.classList.add(\"list-group\");\n\ntodos.forEach(function(todo) {\n        var $chk = document.createElement(\"input\");\n        $chk.type = \"checkbox\";\n        $chk.checked = todo.completed;\n        var $li = document.createElement(\"li\");\n        $li.classList.add(\"list-group-item\");\n    \n    $li.appendChild($chk);\n    $li.appendChild(document.createTextNode(todo.title));\n    \n    $todos.appendChild($li);    \n});\n", "css" : ".todos {\n    font-size: 1.5em;\n}\n", "html" : "<!DOCTYPE html>\n<html>\n  <head>\n    <meta charset=\"utf8\">\n    <title>Lista Zadan</title>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <link href=\"http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css\" rel=\"stylesheet\">\n  </head>\n  <body>\n    <h1>Moje zadania</h1>\n    <ul class=\"todos\"></ul>\n  </body>\n</html>\n", "pure" : true, "active" : "js", "size" : "xl" }, "stream" : true, "microtasks" : [ { "description" : "Wyświetl stan zadania za pomocą czekboksa", "hint" : "Stwórz element <code>input</code> i nadaj mu <code>type='checkbox'</code>", "js" : "createElement\\s*\\(\\s*['\"]input['\"]\\s*\\)" }, { "description" : "Użyj komponentu <code>list-group</code> z Bootstrapa", "hint" : "Zajrzyj do dokumentacji Bootstrapa jak powinna wyglądać struktura HTML", "js" : "list-group-item" } ], "text" : "<h3><span class=\"text-success\">Cel: </span> Zamień obiekty reprezentujące zadania w tablicy <code>todos</code> na elementy drzewa DOM.</h3>\n", "title" : "Zadanie: Wyświetlanie listy zadań", "name" : "Zadanie 1" } } ], "slideId" : "53aa9dd35c03231c66ce3887", "chapters" : [ { "timestamp" : 0, "end" : 21, "name" : "Wprowadzenie", "_id" : { "$oid" : "53b6b563ed7ce7e98119851f" } }, { "timestamp" : 21, "end" : 945, "name" : "Tablice i literały", "_id" : { "$oid" : "53b6b563ed7ce7e98119851e" } }, { "timestamp" : 945, "end" : 1822, "name" : "Obiekty", "_id" : { "$oid" : "53b6b563ed7ce7e98119851d" } }, { "timestamp" : 1822, "end" : 2669, "name" : "Funkcje", "_id" : { "$oid" : "53b6b563ed7ce7e98119851c" } }, { "timestamp" : 2669, "end" : 3214, "name" : "Metody", "_id" : { "$oid" : "53b6b563ed7ce7e98119851b" } }, { "timestamp" : 3214, "end" : 3455, "name" : "HTML", "_id" : { "$oid" : "53b6b563ed7ce7e98119851a" } }, { "timestamp" : 3455, "end" : 4161, "name" : "HTML5", "_id" : { "$oid" : "53b6b563ed7ce7e981198519" } }, { "timestamp" : 4161, "end" : 4794, "name" : "Modyfikowanie DOM", "_id" : { "$oid" : "53b6b563ed7ce7e981198518" } }, { "timestamp" : 4794, "end" : 5386, "name" : "Tworzenie elementów DOM", "_id" : { "$oid" : "53b6b563ed7ce7e981198517" } }, { "timestamp" : 5386, "end" : 6727, "name" : "Zadanie - Lista Todos", "_id" : { "$oid" : "53b6b563ed7ce7e981198516" } }, { "timestamp" : 6727, "end" : 7090, "name" : "Scopes", "_id" : { "$oid" : "53b6b563ed7ce7e981198515" } }, { "timestamp" : 7090, "end" : 7100, "name" : "Zakończenie", "_id" : { "$oid" : "53b6b563ed7ce7e981198514" } } ], "timeOffset" : 782, "title" : "Szkolenie", "videoUrl" : "https://www.youtube.com/watch?v=cpBRAZ7RJvc", "__v" : 6 }
